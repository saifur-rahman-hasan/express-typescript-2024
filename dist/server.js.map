{"version":3,"sources":["../src/server.ts","../src/api-docs/openAPIRouter.ts","../src/api-docs/openAPIDocumentGenerator.ts","../src/api/healthCheck/healthCheckRouter.ts","../src/api-docs/openAPIResponseBuilders.ts","../src/common/models/serviceResponse.ts","../src/common/utils/httpHandlers.ts","../src/api/user/userRouter.ts","../src/api/user/userModel.ts","../src/common/utils/commonValidation.ts","../src/api/user/userService.ts","../src/api/user/userRepository.ts","../src/api/user/userController.ts","../src/common/middleware/errorHandler.ts","../src/common/middleware/rateLimiter.ts","../src/common/utils/envConfig.ts","../src/common/middleware/requestLogger.ts"],"sourcesContent":["import cors from \"cors\";\nimport express, { type Express } from \"express\";\nimport helmet from \"helmet\";\nimport { pino } from \"pino\";\n\nimport { openAPIRouter } from \"@/api-docs/openAPIRouter\";\nimport { healthCheckRouter } from \"@/api/healthCheck/healthCheckRouter\";\nimport { userRouter } from \"@/api/user/userRouter\";\nimport errorHandler from \"@/common/middleware/errorHandler\";\nimport rateLimiter from \"@/common/middleware/rateLimiter\";\nimport requestLogger from \"@/common/middleware/requestLogger\";\nimport { env } from \"@/common/utils/envConfig\";\n\nconst logger = pino({ name: \"server start\" });\nconst app: Express = express();\n\n// Set the application to trust the reverse proxy\napp.set(\"trust proxy\", true);\n\n// Middlewares\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cors({ origin: env.CORS_ORIGIN, credentials: true }));\napp.use(helmet());\napp.use(rateLimiter);\n\n// Request logging\napp.use(requestLogger);\n\n// Routes\napp.use(\"/health-check\", healthCheckRouter);\napp.use(\"/users\", userRouter);\n\n// Swagger UI\napp.use(openAPIRouter);\n\n// Error handlers\napp.use(errorHandler());\n\nexport { app, logger };\n","import express, { type Request, type Response, type Router } from \"express\";\nimport swaggerUi from \"swagger-ui-express\";\n\nimport { generateOpenAPIDocument } from \"@/api-docs/openAPIDocumentGenerator\";\n\nexport const openAPIRouter: Router = express.Router();\nconst openAPIDocument = generateOpenAPIDocument();\n\nopenAPIRouter.get(\"/swagger.json\", (_req: Request, res: Response) => {\n\tres.setHeader(\"Content-Type\", \"application/json\");\n\tres.send(openAPIDocument);\n});\n\nopenAPIRouter.use(\"/\", swaggerUi.serve, swaggerUi.setup(openAPIDocument));\n","import { OpenAPIRegistry, OpenApiGeneratorV3 } from \"@asteasolutions/zod-to-openapi\";\n\nimport { healthCheckRegistry } from \"@/api/healthCheck/healthCheckRouter\";\nimport { userRegistry } from \"@/api/user/userRouter\";\n\nexport function generateOpenAPIDocument() {\n\tconst registry = new OpenAPIRegistry([healthCheckRegistry, userRegistry]);\n\tconst generator = new OpenApiGeneratorV3(registry.definitions);\n\n\treturn generator.generateDocument({\n\t\topenapi: \"3.0.0\",\n\t\tinfo: {\n\t\t\tversion: \"1.0.0\",\n\t\t\ttitle: \"Swagger API\",\n\t\t},\n\t\texternalDocs: {\n\t\t\tdescription: \"View the raw OpenAPI Specification in JSON format\",\n\t\t\turl: \"/swagger.json\",\n\t\t},\n\t});\n}\n","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Request, type Response, type Router } from \"express\";\nimport { z } from \"zod\";\n\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { handleServiceResponse } from \"@/common/utils/httpHandlers\";\n\nexport const healthCheckRegistry = new OpenAPIRegistry();\nexport const healthCheckRouter: Router = express.Router();\n\nhealthCheckRegistry.registerPath({\n\tmethod: \"get\",\n\tpath: \"/health-check\",\n\ttags: [\"Health Check\"],\n\tresponses: createApiResponse(z.null(), \"Success\"),\n});\n\nhealthCheckRouter.get(\"/\", (_req: Request, res: Response) => {\n\tconst serviceResponse = ServiceResponse.success(\"Service is healthy\", null);\n\treturn handleServiceResponse(serviceResponse, res);\n});\n","import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/common/models/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n\treturn {\n\t\t[statusCode]: {\n\t\t\tdescription,\n\t\t\tcontent: {\n\t\t\t\t\"application/json\": {\n\t\t\t\t\tschema: ServiceResponseSchema(schema),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n\treadonly success: boolean;\n\treadonly message: string;\n\treadonly responseObject: T;\n\treadonly statusCode: number;\n\n\tprivate constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n\t\tthis.success = success;\n\t\tthis.message = message;\n\t\tthis.responseObject = responseObject;\n\t\tthis.statusCode = statusCode;\n\t}\n\n\tstatic success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n\t\treturn new ServiceResponse(true, message, responseObject, statusCode);\n\t}\n\n\tstatic failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n\t\treturn new ServiceResponse(false, message, responseObject, statusCode);\n\t}\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n\tz.object({\n\t\tsuccess: z.boolean(),\n\t\tmessage: z.string(),\n\t\tresponseObject: dataSchema.optional(),\n\t\tstatusCode: z.number(),\n\t});\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<unknown>, response: Response) => {\n\treturn response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n\ttry {\n\t\tschema.parse({ body: req.body, query: req.query, params: req.params });\n\t\tnext();\n\t} catch (err) {\n\t\tconst errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n\t\tconst statusCode = StatusCodes.BAD_REQUEST;\n\t\tconst serviceResponse = ServiceResponse.failure(errorMessage, null, statusCode);\n\t\treturn handleServiceResponse(serviceResponse, res);\n\t}\n};\n","import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Router } from \"express\";\nimport { z } from \"zod\";\n\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { GetUserSchema, UserSchema } from \"@/api/user/userModel\";\nimport { validateRequest } from \"@/common/utils/httpHandlers\";\nimport { userController } from \"./userController\";\n\nexport const userRegistry = new OpenAPIRegistry();\nexport const userRouter: Router = express.Router();\n\nuserRegistry.register(\"User\", UserSchema);\n\nuserRegistry.registerPath({\n\tmethod: \"get\",\n\tpath: \"/users\",\n\ttags: [\"User\"],\n\tresponses: createApiResponse(z.array(UserSchema), \"Success\"),\n});\n\nuserRouter.get(\"/\", userController.getUsers);\n\nuserRegistry.registerPath({\n\tmethod: \"get\",\n\tpath: \"/users/{id}\",\n\ttags: [\"User\"],\n\trequest: { params: GetUserSchema.shape.params },\n\tresponses: createApiResponse(UserSchema, \"Success\"),\n});\n\nuserRouter.get(\"/:id\", validateRequest(GetUserSchema), userController.getUser);\n","import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { z } from \"zod\";\n\nimport { commonValidations } from \"@/common/utils/commonValidation\";\n\nextendZodWithOpenApi(z);\n\nexport type User = z.infer<typeof UserSchema>;\nexport const UserSchema = z.object({\n\tid: z.number(),\n\tname: z.string(),\n\temail: z.string().email(),\n\tage: z.number(),\n\tcreatedAt: z.date(),\n\tupdatedAt: z.date(),\n});\n\n// Input Validation for 'GET users/:id' endpoint\nexport const GetUserSchema = z.object({\n\tparams: z.object({ id: commonValidations.id }),\n});\n","import { z } from \"zod\";\n\nexport const commonValidations = {\n\tid: z\n\t\t.string()\n\t\t.refine((data) => !Number.isNaN(Number(data)), \"ID must be a numeric value\")\n\t\t.transform(Number)\n\t\t.refine((num) => num > 0, \"ID must be a positive number\"),\n\t// ... other common validations\n};\n","import { StatusCodes } from \"http-status-codes\";\n\nimport type { User } from \"@/api/user/userModel\";\nimport { UserRepository } from \"@/api/user/userRepository\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { logger } from \"@/server\";\n\nexport class UserService {\n\tprivate userRepository: UserRepository;\n\n\tconstructor(repository: UserRepository = new UserRepository()) {\n\t\tthis.userRepository = repository;\n\t}\n\n\t// Retrieves all users from the database\n\tasync findAll(): Promise<ServiceResponse<User[] | null>> {\n\t\ttry {\n\t\t\tconst users = await this.userRepository.findAllAsync();\n\t\t\tif (!users || users.length === 0) {\n\t\t\t\treturn ServiceResponse.failure(\"No Users found\", null, StatusCodes.NOT_FOUND);\n\t\t\t}\n\t\t\treturn ServiceResponse.success<User[]>(\"Users found\", users);\n\t\t} catch (ex) {\n\t\t\tconst errorMessage = `Error finding all users: $${(ex as Error).message}`;\n\t\t\tlogger.error(errorMessage);\n\t\t\treturn ServiceResponse.failure(\n\t\t\t\t\"An error occurred while retrieving users.\",\n\t\t\t\tnull,\n\t\t\t\tStatusCodes.INTERNAL_SERVER_ERROR,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Retrieves a single user by their ID\n\tasync findById(id: number): Promise<ServiceResponse<User | null>> {\n\t\ttry {\n\t\t\tconst user = await this.userRepository.findByIdAsync(id);\n\t\t\tif (!user) {\n\t\t\t\treturn ServiceResponse.failure(\"User not found\", null, StatusCodes.NOT_FOUND);\n\t\t\t}\n\t\t\treturn ServiceResponse.success<User>(\"User found\", user);\n\t\t} catch (ex) {\n\t\t\tconst errorMessage = `Error finding user with id ${id}:, ${(ex as Error).message}`;\n\t\t\tlogger.error(errorMessage);\n\t\t\treturn ServiceResponse.failure(\"An error occurred while finding user.\", null, StatusCodes.INTERNAL_SERVER_ERROR);\n\t\t}\n\t}\n}\n\nexport const userService = new UserService();\n","import type { User } from \"@/api/user/userModel\";\n\nexport const users: User[] = [\n\t{\n\t\tid: 1,\n\t\tname: \"Alice\",\n\t\temail: \"alice@example.com\",\n\t\tage: 42,\n\t\tcreatedAt: new Date(),\n\t\tupdatedAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days later\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Robert\",\n\t\temail: \"Robert@example.com\",\n\t\tage: 21,\n\t\tcreatedAt: new Date(),\n\t\tupdatedAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days later\n\t},\n];\n\nexport class UserRepository {\n\tasync findAllAsync(): Promise<User[]> {\n\t\treturn users;\n\t}\n\n\tasync findByIdAsync(id: number): Promise<User | null> {\n\t\treturn users.find((user) => user.id === id) || null;\n\t}\n}\n","import type { Request, RequestHandler, Response } from \"express\";\n\nimport { userService } from \"@/api/user/userService\";\nimport { handleServiceResponse } from \"@/common/utils/httpHandlers\";\n\nclass UserController {\n\tpublic getUsers: RequestHandler = async (_req: Request, res: Response) => {\n\t\tconst serviceResponse = await userService.findAll();\n\t\treturn handleServiceResponse(serviceResponse, res);\n\t};\n\n\tpublic getUser: RequestHandler = async (req: Request, res: Response) => {\n\t\tconst id = Number.parseInt(req.params.id as string, 10);\n\t\tconst serviceResponse = await userService.findById(id);\n\t\treturn handleServiceResponse(serviceResponse, res);\n\t};\n}\n\nexport const userController = new UserController();\n","import type { ErrorRequestHandler, RequestHandler } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nconst unexpectedRequest: RequestHandler = (_req, res) => {\n\tres.sendStatus(StatusCodes.NOT_FOUND);\n};\n\nconst addErrorToRequestLog: ErrorRequestHandler = (err, _req, res, next) => {\n\tres.locals.err = err;\n\tnext(err);\n};\n\nexport default () => [unexpectedRequest, addErrorToRequestLog];\n","import type { Request } from \"express\";\nimport { rateLimit } from \"express-rate-limit\";\n\nimport { env } from \"@/common/utils/envConfig\";\n\nconst rateLimiter = rateLimit({\n\tlegacyHeaders: true,\n\tlimit: env.COMMON_RATE_LIMIT_MAX_REQUESTS,\n\tmessage: \"Too many requests, please try again later.\",\n\tstandardHeaders: true,\n\twindowMs: 15 * 60 * env.COMMON_RATE_LIMIT_WINDOW_MS,\n\tkeyGenerator: (req: Request) => req.ip as string,\n});\n\nexport default rateLimiter;\n","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n\tNODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n\tHOST: host({ devDefault: testOnly(\"localhost\") }),\n\tPORT: port({ devDefault: testOnly(3000) }),\n\tCORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n\tCOMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n\tCOMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n});\n","import { randomUUID } from \"node:crypto\";\nimport type { IncomingMessage, ServerResponse } from \"node:http\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { StatusCodes, getReasonPhrase } from \"http-status-codes\";\nimport type { LevelWithSilent } from \"pino\";\nimport { type CustomAttributeKeys, type Options, pinoHttp } from \"pino-http\";\n\nimport { env } from \"@/common/utils/envConfig\";\n\nenum LogLevel {\n\tFatal = \"fatal\",\n\tError = \"error\",\n\tWarn = \"warn\",\n\tInfo = \"info\",\n\tDebug = \"debug\",\n\tTrace = \"trace\",\n\tSilent = \"silent\",\n}\n\ntype PinoCustomProps = {\n\trequest: Request;\n\tresponse: Response;\n\terror: Error;\n\tresponseBody: unknown;\n};\n\nconst requestLogger = (options?: Options): RequestHandler[] => {\n\tconst pinoOptions: Options = {\n\t\tenabled: env.isProduction,\n\t\tcustomProps: customProps as unknown as Options[\"customProps\"],\n\t\tredact: [],\n\t\tgenReqId,\n\t\tcustomLogLevel,\n\t\tcustomSuccessMessage,\n\t\tcustomReceivedMessage: (req) => `request received: ${req.method}`,\n\t\tcustomErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\n\t\tcustomAttributeKeys,\n\t\t...options,\n\t};\n\treturn [responseBodyMiddleware, pinoHttp(pinoOptions)];\n};\n\nconst customAttributeKeys: CustomAttributeKeys = {\n\treq: \"request\",\n\tres: \"response\",\n\terr: \"error\",\n\tresponseTime: \"timeTaken\",\n};\n\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\n\trequest: req,\n\tresponse: res,\n\terror: res.locals.err,\n\tresponseBody: res.locals.responseBody,\n});\n\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\n\tconst isNotProduction = !env.isProduction;\n\tif (isNotProduction) {\n\t\tconst originalSend = res.send;\n\t\tres.send = (content) => {\n\t\t\tres.locals.responseBody = content;\n\t\t\tres.send = originalSend;\n\t\t\treturn originalSend.call(res, content);\n\t\t};\n\t}\n\tnext();\n};\n\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\n\tif (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\n\tif (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\n\tif (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\n\treturn LogLevel.Info;\n};\n\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n\tif (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\n\treturn `${req.method} completed`;\n};\n\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n\tconst existingID = req.id ?? req.headers[\"x-request-id\"];\n\tif (existingID) return existingID;\n\tconst id = randomUUID();\n\tres.setHeader(\"X-Request-Id\", id);\n\treturn id;\n};\n\nexport default requestLogger();\n"],"mappings":"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","names":["import_express","import_express","import_zod_to_openapi","import_zod","import_http_status_codes","import_http_status_codes","express","import_zod_to_openapi","import_express","import_zod","import_zod_to_openapi","import_zod","import_zod","num","import_http_status_codes","users","express","express","swaggerUi","import_http_status_codes","dotenv","import_http_status_codes","express","cors","helmet"]}