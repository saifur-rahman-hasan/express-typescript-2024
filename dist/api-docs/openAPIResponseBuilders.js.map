{"version":3,"sources":["../../src/api-docs/openAPIResponseBuilders.ts","../../src/common/models/serviceResponse.ts"],"sourcesContent":["import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/common/models/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n\treturn {\n\t\t[statusCode]: {\n\t\t\tdescription,\n\t\t\tcontent: {\n\t\t\t\t\"application/json\": {\n\t\t\t\t\tschema: ServiceResponseSchema(schema),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n\treadonly success: boolean;\n\treadonly message: string;\n\treadonly responseObject: T;\n\treadonly statusCode: number;\n\n\tprivate constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n\t\tthis.success = success;\n\t\tthis.message = message;\n\t\tthis.responseObject = responseObject;\n\t\tthis.statusCode = statusCode;\n\t}\n\n\tstatic success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n\t\treturn new ServiceResponse(true, message, responseObject, statusCode);\n\t}\n\n\tstatic failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n\t\treturn new ServiceResponse(false, message, responseObject, statusCode);\n\t}\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n\tz.object({\n\t\tsuccess: z.boolean(),\n\t\tmessage: z.string(),\n\t\tresponseObject: dataSchema.optional(),\n\t\tstatusCode: z.number(),\n\t});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,4BAA4B;;;ACA5B,+BAA4B;AAC5B,iBAAkB;AAwBX,IAAM,wBAAwB,CAAyB,eAC7D,aAAE,OAAO;AAAA,EACR,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACtB,CAAC;;;AD1BK,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,sCAAY,IAAI;AACzG,SAAO;AAAA,IACN,CAAC,UAAU,GAAG;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACR,oBAAoB;AAAA,UACnB,QAAQ,sBAAsB,MAAM;AAAA,QACrC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;","names":["import_http_status_codes"]}