{"version":3,"sources":["../../../src/api/healthCheck/healthCheckRouter.ts","../../../src/api-docs/openAPIResponseBuilders.ts","../../../src/common/models/serviceResponse.ts","../../../src/common/utils/httpHandlers.ts"],"sourcesContent":["import { OpenAPIRegistry } from \"@asteasolutions/zod-to-openapi\";\nimport express, { type Request, type Response, type Router } from \"express\";\nimport { z } from \"zod\";\n\nimport { createApiResponse } from \"@/api-docs/openAPIResponseBuilders\";\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\nimport { handleServiceResponse } from \"@/common/utils/httpHandlers\";\n\nexport const healthCheckRegistry = new OpenAPIRegistry();\nexport const healthCheckRouter: Router = express.Router();\n\nhealthCheckRegistry.registerPath({\n\tmethod: \"get\",\n\tpath: \"/health-check\",\n\ttags: [\"Health Check\"],\n\tresponses: createApiResponse(z.null(), \"Success\"),\n});\n\nhealthCheckRouter.get(\"/\", (_req: Request, res: Response) => {\n\tconst serviceResponse = ServiceResponse.success(\"Service is healthy\", null);\n\treturn handleServiceResponse(serviceResponse, res);\n});\n","import { StatusCodes } from \"http-status-codes\";\nimport type { z } from \"zod\";\n\nimport { ServiceResponseSchema } from \"@/common/models/serviceResponse\";\n\nexport function createApiResponse(schema: z.ZodTypeAny, description: string, statusCode = StatusCodes.OK) {\n\treturn {\n\t\t[statusCode]: {\n\t\t\tdescription,\n\t\t\tcontent: {\n\t\t\t\t\"application/json\": {\n\t\t\t\t\tschema: ServiceResponseSchema(schema),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n\n// Use if you want multiple responses for a single endpoint\n\n// import { ResponseConfig } from '@asteasolutions/zod-to-openapi';\n// import { ApiResponseConfig } from '@common/models/openAPIResponseConfig';\n// export type ApiResponseConfig = {\n//   schema: z.ZodTypeAny;\n//   description: string;\n//   statusCode: StatusCodes;\n// };\n// export function createApiResponses(configs: ApiResponseConfig[]) {\n//   const responses: { [key: string]: ResponseConfig } = {};\n//   configs.forEach(({ schema, description, statusCode }) => {\n//     responses[statusCode] = {\n//       description,\n//       content: {\n//         'application/json': {\n//           schema: ServiceResponseSchema(schema),\n//         },\n//       },\n//     };\n//   });\n//   return responses;\n// }\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n\treadonly success: boolean;\n\treadonly message: string;\n\treadonly responseObject: T;\n\treadonly statusCode: number;\n\n\tprivate constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n\t\tthis.success = success;\n\t\tthis.message = message;\n\t\tthis.responseObject = responseObject;\n\t\tthis.statusCode = statusCode;\n\t}\n\n\tstatic success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n\t\treturn new ServiceResponse(true, message, responseObject, statusCode);\n\t}\n\n\tstatic failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n\t\treturn new ServiceResponse(false, message, responseObject, statusCode);\n\t}\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n\tz.object({\n\t\tsuccess: z.boolean(),\n\t\tmessage: z.string(),\n\t\tresponseObject: dataSchema.optional(),\n\t\tstatusCode: z.number(),\n\t});\n","import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<unknown>, response: Response) => {\n\treturn response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n\ttry {\n\t\tschema.parse({ body: req.body, query: req.query, params: req.params });\n\t\tnext();\n\t} catch (err) {\n\t\tconst errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n\t\tconst statusCode = StatusCodes.BAD_REQUEST;\n\t\tconst serviceResponse = ServiceResponse.failure(errorMessage, null, statusCode);\n\t\treturn handleServiceResponse(serviceResponse, res);\n\t}\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAgC;AAChC,qBAAkE;AAClE,IAAAA,cAAkB;;;ACFlB,IAAAC,4BAA4B;;;ACA5B,+BAA4B;AAC5B,iBAAkB;AAEX,IAAM,kBAAN,MAAM,iBAA0B;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,SAAkB,SAAiB,gBAAmB,YAAoB;AAC7F,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,IAAI;AAC1F,WAAO,IAAI,iBAAgB,MAAM,SAAS,gBAAgB,UAAU;AAAA,EACrE;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,aAAa;AACnG,WAAO,IAAI,iBAAgB,OAAO,SAAS,gBAAgB,UAAU;AAAA,EACtE;AACD;AAEO,IAAM,wBAAwB,CAAyB,eAC7D,aAAE,OAAO;AAAA,EACR,SAAS,aAAE,QAAQ;AAAA,EACnB,SAAS,aAAE,OAAO;AAAA,EAClB,gBAAgB,WAAW,SAAS;AAAA,EACpC,YAAY,aAAE,OAAO;AACtB,CAAC;;;AD1BK,SAAS,kBAAkB,QAAsB,aAAqB,aAAa,sCAAY,IAAI;AACzG,SAAO;AAAA,IACN,CAAC,UAAU,GAAG;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACR,oBAAoB;AAAA,UACnB,QAAQ,sBAAsB,MAAM;AAAA,QACrC;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;;;AEfA,IAAAC,4BAA4B;AAKrB,IAAM,wBAAwB,CAAC,iBAA2C,aAAuB;AACvG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACxE;;;AHAO,IAAM,sBAAsB,IAAI,sCAAgB;AAChD,IAAM,oBAA4B,eAAAC,QAAQ,OAAO;AAExD,oBAAoB,aAAa;AAAA,EAChC,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM,CAAC,cAAc;AAAA,EACrB,WAAW,kBAAkB,cAAE,KAAK,GAAG,SAAS;AACjD,CAAC;AAED,kBAAkB,IAAI,KAAK,CAAC,MAAe,QAAkB;AAC5D,QAAM,kBAAkB,gBAAgB,QAAQ,sBAAsB,IAAI;AAC1E,SAAO,sBAAsB,iBAAiB,GAAG;AAClD,CAAC;","names":["import_zod","import_http_status_codes","import_http_status_codes","express"]}