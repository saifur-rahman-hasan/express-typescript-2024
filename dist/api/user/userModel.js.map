{"version":3,"sources":["../../../src/api/user/userModel.ts","../../../src/common/utils/commonValidation.ts"],"sourcesContent":["import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { z } from \"zod\";\n\nimport { commonValidations } from \"@/common/utils/commonValidation\";\n\nextendZodWithOpenApi(z);\n\nexport type User = z.infer<typeof UserSchema>;\nexport const UserSchema = z.object({\n\tid: z.number(),\n\tname: z.string(),\n\temail: z.string().email(),\n\tage: z.number(),\n\tcreatedAt: z.date(),\n\tupdatedAt: z.date(),\n});\n\n// Input Validation for 'GET users/:id' endpoint\nexport const GetUserSchema = z.object({\n\tparams: z.object({ id: commonValidations.id }),\n});\n","import { z } from \"zod\";\n\nexport const commonValidations = {\n\tid: z\n\t\t.string()\n\t\t.refine((data) => !Number.isNaN(Number(data)), \"ID must be a numeric value\")\n\t\t.transform(Number)\n\t\t.refine((num) => num > 0, \"ID must be a positive number\"),\n\t// ... other common validations\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqC;AACrC,IAAAA,cAAkB;;;ACDlB,iBAAkB;AAEX,IAAM,oBAAoB;AAAA,EAChC,IAAI,aACF,OAAO,EACP,OAAO,CAAC,SAAS,CAAC,OAAO,MAAM,OAAO,IAAI,CAAC,GAAG,4BAA4B,EAC1E,UAAU,MAAM,EAChB,OAAO,CAAC,QAAQ,MAAM,GAAG,8BAA8B;AAAA;AAE1D;;;IDJA,4CAAqB,aAAC;AAGf,IAAM,aAAa,cAAE,OAAO;AAAA,EAClC,IAAI,cAAE,OAAO;AAAA,EACb,MAAM,cAAE,OAAO;AAAA,EACf,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EACxB,KAAK,cAAE,OAAO;AAAA,EACd,WAAW,cAAE,KAAK;AAAA,EAClB,WAAW,cAAE,KAAK;AACnB,CAAC;AAGM,IAAM,gBAAgB,cAAE,OAAO;AAAA,EACrC,QAAQ,cAAE,OAAO,EAAE,IAAI,kBAAkB,GAAG,CAAC;AAC9C,CAAC;","names":["import_zod"]}