{"version":3,"sources":["../../../src/common/middleware/requestLogger.ts","../../../src/common/utils/envConfig.ts"],"sourcesContent":["import { randomUUID } from \"node:crypto\";\nimport type { IncomingMessage, ServerResponse } from \"node:http\";\nimport type { Request, RequestHandler, Response } from \"express\";\nimport { StatusCodes, getReasonPhrase } from \"http-status-codes\";\nimport type { LevelWithSilent } from \"pino\";\nimport { type CustomAttributeKeys, type Options, pinoHttp } from \"pino-http\";\n\nimport { env } from \"@/common/utils/envConfig\";\n\nenum LogLevel {\n\tFatal = \"fatal\",\n\tError = \"error\",\n\tWarn = \"warn\",\n\tInfo = \"info\",\n\tDebug = \"debug\",\n\tTrace = \"trace\",\n\tSilent = \"silent\",\n}\n\ntype PinoCustomProps = {\n\trequest: Request;\n\tresponse: Response;\n\terror: Error;\n\tresponseBody: unknown;\n};\n\nconst requestLogger = (options?: Options): RequestHandler[] => {\n\tconst pinoOptions: Options = {\n\t\tenabled: env.isProduction,\n\t\tcustomProps: customProps as unknown as Options[\"customProps\"],\n\t\tredact: [],\n\t\tgenReqId,\n\t\tcustomLogLevel,\n\t\tcustomSuccessMessage,\n\t\tcustomReceivedMessage: (req) => `request received: ${req.method}`,\n\t\tcustomErrorMessage: (_req, res) => `request errored with status code: ${res.statusCode}`,\n\t\tcustomAttributeKeys,\n\t\t...options,\n\t};\n\treturn [responseBodyMiddleware, pinoHttp(pinoOptions)];\n};\n\nconst customAttributeKeys: CustomAttributeKeys = {\n\treq: \"request\",\n\tres: \"response\",\n\terr: \"error\",\n\tresponseTime: \"timeTaken\",\n};\n\nconst customProps = (req: Request, res: Response): PinoCustomProps => ({\n\trequest: req,\n\tresponse: res,\n\terror: res.locals.err,\n\tresponseBody: res.locals.responseBody,\n});\n\nconst responseBodyMiddleware: RequestHandler = (_req, res, next) => {\n\tconst isNotProduction = !env.isProduction;\n\tif (isNotProduction) {\n\t\tconst originalSend = res.send;\n\t\tres.send = (content) => {\n\t\t\tres.locals.responseBody = content;\n\t\t\tres.send = originalSend;\n\t\t\treturn originalSend.call(res, content);\n\t\t};\n\t}\n\tnext();\n};\n\nconst customLogLevel = (_req: IncomingMessage, res: ServerResponse<IncomingMessage>, err?: Error): LevelWithSilent => {\n\tif (err || res.statusCode >= StatusCodes.INTERNAL_SERVER_ERROR) return LogLevel.Error;\n\tif (res.statusCode >= StatusCodes.BAD_REQUEST) return LogLevel.Warn;\n\tif (res.statusCode >= StatusCodes.MULTIPLE_CHOICES) return LogLevel.Silent;\n\treturn LogLevel.Info;\n};\n\nconst customSuccessMessage = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n\tif (res.statusCode === StatusCodes.NOT_FOUND) return getReasonPhrase(StatusCodes.NOT_FOUND);\n\treturn `${req.method} completed`;\n};\n\nconst genReqId = (req: IncomingMessage, res: ServerResponse<IncomingMessage>) => {\n\tconst existingID = req.id ?? req.headers[\"x-request-id\"];\n\tif (existingID) return existingID;\n\tconst id = randomUUID();\n\tres.setHeader(\"X-Request-Id\", id);\n\treturn id;\n};\n\nexport default requestLogger();\n","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n\tNODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n\t// HOST: host({ devDefault: testOnly(\"localhost\") }),\n\t// PORT: port({ devDefault: testOnly(3000) }),\n\tCORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:3000\") }),\n\tCOMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n\tCOMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2B;AAG3B,+BAA6C;AAE7C,uBAAiE;;;ACLjE,oBAAmB;AACnB,qBAAyD;AAEzD,cAAAA,QAAO,OAAO;AAEP,IAAM,UAAM,yBAAS,QAAQ,KAAK;AAAA,EACxC,cAAU,oBAAI,EAAE,gBAAY,yBAAS,MAAM,GAAG,SAAS,CAAC,eAAe,cAAc,MAAM,EAAE,CAAC;AAAA;AAAA;AAAA,EAG9F,iBAAa,oBAAI,EAAE,gBAAY,yBAAS,uBAAuB,EAAE,CAAC;AAAA,EAClE,oCAAgC,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAAA,EAClE,iCAA6B,oBAAI,EAAE,gBAAY,yBAAS,GAAI,EAAE,CAAC;AAChE,CAAC;;;ADcD,IAAM,gBAAgB,CAAC,YAAwC;AAC9D,QAAM,cAAuB;AAAA,IAC5B,SAAS,IAAI;AAAA,IACb;AAAA,IACA,QAAQ,CAAC;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,uBAAuB,CAAC,QAAQ,qBAAqB,IAAI,MAAM;AAAA,IAC/D,oBAAoB,CAAC,MAAM,QAAQ,qCAAqC,IAAI,UAAU;AAAA,IACtF;AAAA,IACA,GAAG;AAAA,EACJ;AACA,SAAO,CAAC,4BAAwB,2BAAS,WAAW,CAAC;AACtD;AAEA,IAAM,sBAA2C;AAAA,EAChD,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,cAAc;AACf;AAEA,IAAM,cAAc,CAAC,KAAc,SAAoC;AAAA,EACtE,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO,IAAI,OAAO;AAAA,EAClB,cAAc,IAAI,OAAO;AAC1B;AAEA,IAAM,yBAAyC,CAAC,MAAM,KAAK,SAAS;AACnE,QAAM,kBAAkB,CAAC,IAAI;AAC7B,MAAI,iBAAiB;AACpB,UAAM,eAAe,IAAI;AACzB,QAAI,OAAO,CAAC,YAAY;AACvB,UAAI,OAAO,eAAe;AAC1B,UAAI,OAAO;AACX,aAAO,aAAa,KAAK,KAAK,OAAO;AAAA,IACtC;AAAA,EACD;AACA,OAAK;AACN;AAEA,IAAM,iBAAiB,CAAC,MAAuB,KAAsC,QAAiC;AACrH,MAAI,OAAO,IAAI,cAAc,qCAAY,sBAAuB,QAAO;AACvE,MAAI,IAAI,cAAc,qCAAY,YAAa,QAAO;AACtD,MAAI,IAAI,cAAc,qCAAY,iBAAkB,QAAO;AAC3D,SAAO;AACR;AAEA,IAAM,uBAAuB,CAAC,KAAsB,QAAyC;AAC5F,MAAI,IAAI,eAAe,qCAAY,UAAW,YAAO,0CAAgB,qCAAY,SAAS;AAC1F,SAAO,GAAG,IAAI,MAAM;AACrB;AAEA,IAAM,WAAW,CAAC,KAAsB,QAAyC;AAChF,QAAM,aAAa,IAAI,MAAM,IAAI,QAAQ,cAAc;AACvD,MAAI,WAAY,QAAO;AACvB,QAAM,SAAK,+BAAW;AACtB,MAAI,UAAU,gBAAgB,EAAE;AAChC,SAAO;AACR;AAEA,IAAO,wBAAQ,cAAc;","names":["dotenv"]}