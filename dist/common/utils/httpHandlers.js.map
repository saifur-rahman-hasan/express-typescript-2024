{"version":3,"sources":["../../../src/common/utils/httpHandlers.ts","../../../src/common/models/serviceResponse.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodError, ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<unknown>, response: Response) => {\n\treturn response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n\ttry {\n\t\tschema.parse({ body: req.body, query: req.query, params: req.params });\n\t\tnext();\n\t} catch (err) {\n\t\tconst errorMessage = `Invalid input: ${(err as ZodError).errors.map((e) => e.message).join(\", \")}`;\n\t\tconst statusCode = StatusCodes.BAD_REQUEST;\n\t\tconst serviceResponse = ServiceResponse.failure(errorMessage, null, statusCode);\n\t\treturn handleServiceResponse(serviceResponse, res);\n\t}\n};\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n\treadonly success: boolean;\n\treadonly message: string;\n\treadonly responseObject: T;\n\treadonly statusCode: number;\n\n\tprivate constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n\t\tthis.success = success;\n\t\tthis.message = message;\n\t\tthis.responseObject = responseObject;\n\t\tthis.statusCode = statusCode;\n\t}\n\n\tstatic success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n\t\treturn new ServiceResponse(true, message, responseObject, statusCode);\n\t}\n\n\tstatic failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n\t\treturn new ServiceResponse(false, message, responseObject, statusCode);\n\t}\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n\tz.object({\n\t\tsuccess: z.boolean(),\n\t\tmessage: z.string(),\n\t\tresponseObject: dataSchema.optional(),\n\t\tstatusCode: z.number(),\n\t});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,4BAA4B;;;ACD5B,+BAA4B;AAC5B,iBAAkB;AAEX,IAAM,kBAAN,MAAM,iBAA0B;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,SAAkB,SAAiB,gBAAmB,YAAoB;AAC7F,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,IAAI;AAC1F,WAAO,IAAI,iBAAgB,MAAM,SAAS,gBAAgB,UAAU;AAAA,EACrE;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,aAAa;AACnG,WAAO,IAAI,iBAAgB,OAAO,SAAS,gBAAgB,UAAU;AAAA,EACtE;AACD;;;ADjBO,IAAM,wBAAwB,CAAC,iBAA2C,aAAuB;AACvG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACxE;AAEO,IAAM,kBAAkB,CAAC,WAAsB,CAAC,KAAc,KAAe,SAAuB;AAC1G,MAAI;AACH,WAAO,MAAM,EAAE,MAAM,IAAI,MAAM,OAAO,IAAI,OAAO,QAAQ,IAAI,OAAO,CAAC;AACrE,SAAK;AAAA,EACN,SAAS,KAAK;AACb,UAAM,eAAe,kBAAmB,IAAiB,OAAO,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC;AAChG,UAAM,aAAa,sCAAY;AAC/B,UAAM,kBAAkB,gBAAgB,QAAQ,cAAc,MAAM,UAAU;AAC9E,WAAO,sBAAsB,iBAAiB,GAAG;AAAA,EAClD;AACD;","names":["import_http_status_codes"]}